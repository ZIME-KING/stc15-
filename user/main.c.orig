#include "main.h"

unsigned char* temp_p;

void main() {
	unsigned char key_flag;
	P_SW1 &= ~0xc0;                		//串口设置在p3.3  p3.2
	//P_SW1 = (P_SW1 & ~0xc0) | 0x40	;	//p3.6  p3.7
	
	Delay_us(1);	
	init_uart(); 					//串口初始化
	Timer0Init();					//定时器0初始化做不定长帧的接收
	OLED_Init();
	OLED_Clear();
	OLED_ShowString(16,0,"OLED_TEST_OK",16);
	OLED_DrawBMP(0,2,64,6,BMP2);
	Delay_ms(1000);
	OLED_Clear();			//清屏
				
	
	while(NRF24L01_Check()); // 等待检测到NRF24L01，程序才会向下执行
	NRF24L01_RT_Init();
  

	strcpy(rece_buf,"_2.4ghz_tx_ok");
	rece_buf[0]=strlen(rece_buf)-1;
	SEND_BUF(rece_buf);	       									// 2.4g发送测试

	uart_send_str("uart ok");	


	strcpy(rece_buf,"_12346789");
	uart_send_str_len(rece_buf,strlen(rece_buf));
	
	while(1) {

			Delay_ms(2000);		
		
		
		
		uart_send_str_len(frame[0].buffer,frame[0].length);
		uart_send_str("\r\n");
		uart_send_str_len(frame[1].buffer,frame[1].length);
		uart_send_str("\r\n");
		uart_send_str_len(frame[2].buffer,frame[2].length);
    uart_send_str("\r\n");
		
		//做一个接收 保存数据的东西
		
		unsigned char num[100];
		unsigned char *p;
		
		p=&num[0];
		
		
		for(x=0;x<=2;x++){
		
			if (frame[x].status==1){     			//有接收到数据 进行处理
			for(i=0;i=<frame[x].length;i++){
				*p=frame[0].buffer[i];
				 p++;
			}
			frame[x].status=0;   						//处理完毕 等到有一帧接收完了 这个会置1的
		}
	}
		
		if(p=&num[100]){
		p=&num[0]
		}
		
		
		
		
		
		
		
		
		
		
		
		
		if(NRF_IRQ==0)	 											//如果无线模块接收到数据IRQ会清零 				要求高的把这个放中断里去
		{		
			if(NRF24L01_RxPacket(rece_buf)==0)  //将接收到的数据放在
			{																		//第1位以后是收到的命令数据，rece_buf[0]是数据位数长度 硬件设计好的 详细查数据手册
				 
					temp_p=&rece_buf;      											//这里解释一下temp_p是一个指针 指针地址=接收到的值的地址
					temp_p=temp_p+1;														//地址加1
					uart_send_str_len(temp_p,rece_buf[0]),			//这个值就把第一位的   长度数据 给去掉了

					OLED_Clear();																//清屏
					OLED_ShowString(0,0,temp_p,16);							//oled显示接收到的数据
			}
		}

			key_flag=scan_key();  //获取按键值 无按下返回值为0
		//如果一共要发送3个字节，rece_buf[0]必须是3！！！！！！
		//rece_buf[0]为本次要发送的字节数
			switch (key_flag){
				case 1:
				strcpy(rece_buf,"_key1_down");
				rece_buf[0]=strlen(rece_buf)-1;
				SEND_BUF(rece_buf);	       		// 2.4g发送测试
				//uart_send_str(rece_buf);   //    uart输出
				break;
				
				case 2:
				strcpy(rece_buf,"_key2_down");
				rece_buf[0]=strlen(rece_buf)-1;
				SEND_BUF(rece_buf);	      	 // 2.4g发送测试
				//uart_send_str(rece_buf);   //    uart输出
				break;
				
				case 3:	
				strcpy(rece_buf,"_key3_down");
				rece_buf[0]=strlen(rece_buf)-1;
				SEND_BUF(rece_buf);	       // 2.4g发送测试
				//uart_send_str(rece_buf);   //    uart输出				
				break;
				
				case 4:
				strcpy(rece_buf,"_key4_down");
				rece_buf[0]=strlen(rece_buf)-1;
				SEND_BUF(rece_buf);	       // 2.4g发送测试	
				//uart_send_str(rece_buf);   //    uart输出				
				break;
			}
    }
}

