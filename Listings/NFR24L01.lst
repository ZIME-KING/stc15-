C51 COMPILER V9.60.0.0   NFR24L01                                                          05/17/2020 19:06:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NFR24L01
OBJECT MODULE PLACED IN NFR24L01.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\Src\NFR24L01.c COMPACT OPTIMIZE(8,SPEED) INCDIR(.\lib\Inc;.\user;.\u
                    -ser) DEBUG OBJECTEXTEND PRINT(.\Listings\NFR24L01.lst) TABS(2) OBJECT(NFR24L01.obj)

line level    source

   1          /**********************************************************/
   2          /* 名   称：NRF24L01+无线USB通信模块程序                  */
   3          /* 功   能：发送接收测试程序                              */
   4          /*          格式：首位是个数，后面跟要发送的数据          */ 
   5          /*                例如：发送5个字节 11 22 33 44 55(16进制)*/
   6          /*                电脑串口发送：1122334455                */
   7          /*                模块实际发送：051122334455              */     
   8          /* 作者：BQDZ     （论坛：http://bqdz.taobao.com）        */
   9          /* 联系方式： QQ :851968194     旺旺：王亚坤2864          */
  10          /*           手机：15821472722（上海）                    */
  11          /**********************************************************/
  12          
  13          #include  "main.h"
  14          
  15          
  16          unsigned char rece_buf[32];
  17          const uchar TX_ADDRESS[TX_ADR_WIDTH]=ADDRESS_TX; //发送地址
  18          const uchar RX_ADDRESS[RX_ADR_WIDTH]=ADDRESS_RX; //接收地址
  19          
  20          
  21          //io口模拟spi写的时候同时读
  22          /*******************************************************************/
  23          uchar SPI_RW(uchar byte)
  24          {
  25   1        uchar bit_ctr;
  26   1        for(bit_ctr=0;bit_ctr<8;bit_ctr++)  // 输出8位
  27   1        {
  28   2          NRF_MOSI=(byte&0x80);       // MSB TO MOSI
  29   2          byte=(byte<<1);             // shift next bit to MSB
  30   2          NRF_SCK=1;
  31   2          byte|=NRF_MISO;             // capture current MISO bit
  32   2          NRF_SCK=0;
  33   2        }
  34   1        return byte;
  35   1      }
  36          
  37          /*********************************************/
  38          /* 函数功能：给24L01的寄存器写值（一个字节） */
  39          /* 入口参数：reg   要写的寄存器地址          */
  40          /*           value 给寄存器写的值            */
  41          /* 出口参数：status 状态值                   */
  42          /*********************************************/
  43          uchar NRF24L01_Write_Reg(uchar reg,uchar value)
  44          {
  45   1        uchar status;
  46   1      
  47   1        NRF_CSN=0;                  //CSN=0;   
  48   1          status = SPI_RW(reg);   //发送寄存器地址,并读取状态值
  49   1        SPI_RW(value);
  50   1        NRF_CSN=1;                  //CSN=1;
  51   1      
  52   1        return status;
  53   1      }
  54          /*************************************************/
C51 COMPILER V9.60.0.0   NFR24L01                                                          05/17/2020 19:06:56 PAGE 2   

  55          /* 函数功能：读24L01的寄存器值 （一个字节）      */
  56          /* 入口参数：reg  要读的寄存器地址               */
  57          /* 出口参数：value 读出寄存器的值                */
  58          /*************************************************/
  59          uchar NRF24L01_Read_Reg(uchar reg)
  60          {
  61   1        uchar value;
  62   1      
  63   1        NRF_CSN=0;              //CSN=0;   
  64   1          SPI_RW(reg);      //发送寄存器值(位置),并读取状态值
  65   1        value = SPI_RW(NOP);
  66   1        NRF_CSN=1;              //CSN=1;
  67   1      
  68   1        return value;
  69   1      }
  70          /*********************************************/
  71          /* 函数功能：读24L01的寄存器值（多个字节）   */
  72          /* 入口参数：reg   寄存器地址                */
  73          /*           *pBuf 读出寄存器值的存放数组    */
  74          /*           len   数组字节长度              */
  75          /* 出口参数：status 状态值                   */
  76          /*********************************************/
  77          uchar NRF24L01_Read_Buf(uchar reg,uchar *pBuf,uchar len)
  78          {
  79   1        uchar status,u8_ctr;
  80   1        NRF_CSN=0;                    //CSN=0       
  81   1          status=SPI_RW(reg);       //发送寄存器地址,并读取状态值        
  82   1        for(u8_ctr=0;u8_ctr<len;u8_ctr++)
  83   1        pBuf[u8_ctr]=SPI_RW(0XFF);    //读出数据
  84   1        NRF_CSN=1;                    //CSN=1
  85   1          return status;              //返回读到的状态值
  86   1      }
  87          /**********************************************/
  88          /* 函数功能：给24L01的寄存器写值（多个字节）  */
  89          /* 入口参数：reg  要写的寄存器地址            */
  90          /*           *pBuf 值的存放数组               */
  91          /*           len   数组字节长度               */
  92          /**********************************************/
  93          uchar NRF24L01_Write_Buf(uchar reg, uchar *pBuf, uchar len)
  94          {
  95   1        uchar status,u8_ctr;
  96   1        NRF_CSN=0;
  97   1          status = SPI_RW(reg);     //发送寄存器值(位置),并读取状态值
  98   1          for(u8_ctr=0; u8_ctr<len; u8_ctr++)
  99   1        SPI_RW(*pBuf++);        //写入数据
 100   1        NRF_CSN=1;
 101   1          return status;              //返回读到的状态值
 102   1      }                            
 103          
 104          /*********************************************/
 105          /* 函数功能：24L01接收数据                   */
 106          /* 入口参数：rxbuf 接收数据数组              */
 107          /* 返回值： 0   成功收到数据                 */
 108          /*          1   没有收到数据                 */
 109          /*********************************************/
 110          uchar NRF24L01_RxPacket(uchar *rxbuf)
 111          {
 112   1        uchar state;
 113   1         
 114   1        state=NRF24L01_Read_Reg(STATUS);            //读取状态寄存器的值       
 115   1        NRF24L01_Write_Reg(WRITE_REG+STATUS,state); //清除TX_DS或MAX_RT中断标志
 116   1        if(state&RX_OK)                             //接收到数据
C51 COMPILER V9.60.0.0   NFR24L01                                                          05/17/2020 19:06:56 PAGE 3   

 117   1        {
 118   2          NRF_CE = 0;
 119   2          NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 120   2          NRF24L01_Write_Reg(FLUSH_RX,0xff);          //清除RX FIFO寄存器
 121   2          NRF_CE = 1;
 122   2          Delay_150us(); 
 123   2          return 0; 
 124   2        }    
 125   1        return 1;//没收到任何数据
 126   1      }
 127          /**********************************************/
 128          /* 函数功能：设置24L01为发送模式              */
 129          /* 入口参数：txbuf  发送数据数组              */
 130          /* 返回值； 0x10    达到最大重发次数，发送失败*/
 131          /*          0x20    成功发送完成              */
 132          /*          0xff    发送失败                  */
 133          /**********************************************/
 134          uchar NRF24L01_TxPacket(uchar *txbuf)
 135          {
 136   1        uchar state;
 137   1         
 138   1        NRF_CE=0;                                               //CE拉低，使能24L01配置
 139   1          NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH); //写数据到TX BUF  32个字节
 140   1        NRF_CE=1;                                               //CE置高，使能发送     
 141   1        while(NRF_IRQ==1);                                      //等待发送完成
 142   1        state=NRF24L01_Read_Reg(STATUS);                        //读取状态寄存器的值     
 143   1        NRF24L01_Write_Reg(WRITE_REG+STATUS,state);             //清除TX_DS或MAX_RT中断标志
 144   1        if(state&MAX_TX)                                        //达到最大重发次数
 145   1        {
 146   2          NRF24L01_Write_Reg(FLUSH_TX,0xff);                    //清除TX FIFO寄存器 
 147   2          return MAX_TX; 
 148   2        }
 149   1        if(state&TX_OK)                     //发送完成
 150   1        {
 151   2          return TX_OK;
 152   2        }
 153   1        return 0xff;                      //发送失败
 154   1      }
 155          
 156          /********************************************/
 157          /* 函数功能：检测24L01是否存在              */
 158          /* 返回值；  0  存在                        */
 159          /*           1  不存在                      */
 160          /********************************************/    
 161          uchar NRF24L01_Check(void)
 162          {
 163   1        uchar check_in_buf[5]={0x11,0x22,0x33,0x44,0x55};
 164   1        uchar check_out_buf[5]={0x00};
 165   1      
 166   1        NRF_SCK=0;
 167   1        NRF_CSN=1;    
 168   1        NRF_CE=0;
 169   1      
 170   1        NRF24L01_Write_Buf(WRITE_REG+TX_ADDR, check_in_buf, 5);
 171   1      
 172   1        NRF24L01_Read_Buf(READ_REG+TX_ADDR, check_out_buf, 5);
 173   1      
 174   1        if((check_out_buf[0] == 0x11)&&\
 175   1           (check_out_buf[1] == 0x22)&&\
 176   1           (check_out_buf[2] == 0x33)&&\
 177   1           (check_out_buf[3] == 0x44)&&\
 178   1           (check_out_buf[4] == 0x55))return 0;
C51 COMPILER V9.60.0.0   NFR24L01                                                          05/17/2020 19:06:56 PAGE 4   

 179   1        else return 1;
 180   1      }     
 181          
 182          
 183          void NRF24L01_RT_Init(void)
 184          { 
 185   1          NRF_CE=0;     
 186   1          NRF24L01_Write_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 187   1          NRF24L01_Write_Reg(FLUSH_RX,0xff);                  //清除RX FIFO寄存器    
 188   1          NRF24L01_Write_Buf(WRITE_REG+TX_ADDR,(uchar*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
 189   1          NRF24L01_Write_Buf(WRITE_REG+RX_ADDR_P0,(uchar*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能
             -ACK    
 190   1          NRF24L01_Write_Reg(WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    
 191   1          NRF24L01_Write_Reg(WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  
 192   1          NRF24L01_Write_Reg(WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
 193   1          NRF24L01_Write_Reg(WRITE_REG+RF_CH,0);        //设置RF通道为2.400GHz  频率=2.4+0GHz
 194   1          NRF24L01_Write_Reg(WRITE_REG+RF_SETUP,0x0F);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 195   1          NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0f);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式
             -,开启所有中断
 196   1          NRF_CE=1;                   //CE置高，使能发送
 197   1      }
 198          
 199          void SEND_BUF(uchar *buf)
 200          {
 201   1        NRF_CE=0;
 202   1        NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0e);
 203   1        NRF_CE=1;
 204   1        Delay_us(15);
 205   1        NRF24L01_TxPacket(buf);
 206   1        NRF_CE=0;
 207   1        NRF24L01_Write_Reg(WRITE_REG+CONFIG, 0x0f);
 208   1        NRF_CE=1; 
 209   1      }
 210          //void main()
 211          //{
 212          //  buzzer=1;
 213          //  while(NRF24L01_Check()); // 等待检测到NRF24L01，程序才会向下执行
 214          //  NRF24L01_RT_Init();
 215          //  
 216          //      rece_buf[1]='1';
 217          //      rece_buf[2]='2';
 218          //      rece_buf[3]='3';
 219          //      rece_buf[0]=3;              //一共要发送3个字节，rece_buf[0]必须是3！！！！！！
 220          //      SEND_BUF(rece_buf);
 221          //  
 222          //  
 223          //  
 224          //  
 225          //  P3=0XFF;
 226          //  
 227          //  while(1)
 228          //  {
 229          //    if(NRF_IRQ==0)    // 如果无线模块接收到数据
 230          //    {   
 231          //      if(NRF24L01_RxPacket(rece_buf)==0)
 232          //      {        
 233          //        if( rece_buf[1]=='1')       //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
 234          //          LED=0;
 235          //        if( rece_buf[1]=='2')     //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
 236          //          LED=1;    
 237          //      }
 238          //    }
C51 COMPILER V9.60.0.0   NFR24L01                                                          05/17/2020 19:06:56 PAGE 5   

 239          //    if(S1==0)               //按下S1发送ASCII码 “123”
 240          //    {
 241          //      rece_buf[1]='1';
 242          //      rece_buf[2]='2';
 243          //      rece_buf[3]='3';
 244          //      rece_buf[0]=3;              //一共要发送3个字节，rece_buf[0]必须是3！！！！！！
 245          //      SEND_BUF(rece_buf);
 246          //      while(!S1); 
 247          //    }
 248          //    if(S2==0)               //按下S1发送ASCII码 “ABCD”
 249          //    {
 250          //      rece_buf[1]='A';
 251          //      rece_buf[2]='B';
 252          //      rece_buf[3]='C';
 253          //      rece_buf[4]='D';
 254          //      rece_buf[0]=4;              //一共要发送4个字节，rece_buf[0]必须是4！！！！！！
 255          //      SEND_BUF(rece_buf);
 256          //      while(!S2); 
 257          //    }
 258          //    if(0)                 //发送 “上海宝嵌电子”
 259          //    {
 260          //      rece_buf[1]=0xc9;         //上
 261          //      rece_buf[2]=0xcf;         //上
 262          //      rece_buf[3]=0xba;         //海
 263          //      rece_buf[4]=0xa3;         //海
 264          //      rece_buf[5]=0xb1;         //宝
 265          //      rece_buf[6]=0xa6;         //宝
 266          //      rece_buf[7]=0xc7;         //嵌
 267          //      rece_buf[8]=0xb6;         //嵌
 268          //      rece_buf[9]=0xb5;         //电
 269          //      rece_buf[10]=0xe7;        //电
 270          //      rece_buf[11]=0xd7;        //子
 271          //      rece_buf[12]=0xd3;        //子
 272          //      rece_buf[0]=12;           //一共要发送12个字节，rece_buf[0]必须是12！！！！！！
 273          //      SEND_BUF(rece_buf);
 274          //    }
 275          //    delay(100);
 276          //  }
 277          //}
 278          
 279          
 280          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    531    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     42      26
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
