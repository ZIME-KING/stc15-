C51 COMPILER V9.60.0.0   UART                                                              05/17/2020 19:06:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lib\Src\uart.c COMPACT OPTIMIZE(8,SPEED) INCDIR(.\lib\Inc;.\user;.\user)
                    - DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(uart.obj)

line level    source

   1          #include "main.h"
   2          //初始化串口 （设置串口，开启串口中断）
   3          void init_uart(void)    //9600
   4          {
   5   1        SCON = 0x50;    //8位数据,可变波特率
   6   1        AUXR |= 0x40;   //定时器1时钟为Fosc,即1T
   7   1        AUXR &= 0xFE;   //串口1选择定时器1为波特率发生器
   8   1        TMOD &= 0x0F;   //设定定时器1为16位自动重装方式
   9   1        TL1 = 0xE0;   //设定定时初值
  10   1        TH1 = 0xFE;   //设定定时初值
  11   1        ET1 = 0;    //禁止定时器1中断
  12   1        TR1 = 1;    //启动定时器1
  13   1          
  14   1        REN = 1;  //允许接收
  15   1      
  16   1        EA  = 1;                    // 打开总中断
  17   1        ES  = 1;                    // 打开串口中断
  18   1      }         
  19          void Timer0Init(void)   //1毫秒@11.0592MHz
  20          {
  21   1        AUXR |= 0x80;   //定时器时钟1T模式
  22   1        TMOD &= 0xF0;   //设置定时器模式
  23   1        TL0 = 0xCD;     //设置定时初值
  24   1        TH0 = 0xD4;     //设置定时初值
  25   1        TF0 = 0;        //清除TF0标志
  26   1        TR0 = 1;        //定时器0开始计时
  27   1      
  28   1        ET0  = 1;       //开启定时器中断
  29   1      }
  30                     
  31          // 发送一个字节数据
  32          void uart_send_byte(unsigned char dat)
  33          {
  34   1        SBUF = dat;       // 将数据送到发送缓冲寄存器SBUF，一位一位的发送
  35   1        while(!TI);       // 等待发送完毕 (发送完毕TI硬件置1)
  36   1        TI = 0;           // 将TI清零，表示可以发送下一字节数据。
  37   1      }
  38          
  39          // 发送字符串
  40          void uart_send_str(unsigned char *s)
  41          {
  42   1        while(*s != '\0')         //'\0':字符串结束标志
  43   1        {
  44   2          uart_send_byte(*s);     //发送1个字节数据，1个字符占8位，1字节
  45   2          s++;                    //指向下一个字符
  46   2        }
  47   1      }
  48          
  49          // 发送字符串指定 长度
  50          void uart_send_str_len(unsigned char *s,unsigned char len)
  51          {
  52   1        while(len != 0) 
  53   1        {
  54   2          uart_send_byte(*s);     //发送1个字节数据，1个字符占8位，1字节
C51 COMPILER V9.60.0.0   UART                                                              05/17/2020 19:06:56 PAGE 2   

  55   2          s++;                    //指向下一个字符
  56   2          len--;
  57   2        }
  58   1      }
  59          
  60          //串口中断接收任意长度字节
  61          Frame_Typedef frame[FRAME_QUANTITY];        //开3个帧缓存
  62          Uart_Frame_Typedef uart1;                   //
  63          
  64          unsigned char uart_frame_id;
  65          
  66          
  67          void Uart_Time_Even(void){                      //串口接收用在定时器上的事件 用来判断超时
  68   1        
  69   1          if(uart1.status !=FREE){
  70   2            uart1.time_out++;
  71   2            
  72   2              if(uart1.time_out>=FRAME_TIMEOUT){
  73   3                uart1.status=FREE;
  74   3                
  75   3                     
  76   3            //          if(frame[uart1.frame_id].status==0)    //该帧以处理 空闲 
  77   3            //            {
  78   3                      frame[uart1.frame_id].status=1;       //当前帧的状态 0以处理 1未处理
  79   3            //          }
  80   3                      uart_frame_id=uart1.frame_id;
  81   3      //                uart_buffer_status_p=&frame[uart1.frame_id].status;    // 传出当前接收到的帧数据 的id
  82   3      //                uart_buffer_p= &frame[uart1.frame_id].buffer ;         // 传出当前接收到的帧数据状态
  83   3                /*
  84   3                此处添加帧处理程序
  85   3                */
  86   3                      //uart_send_str_len(frame[uart1.frame_id].buffer,frame[uart1.frame_id].length);
  87   3                     
  88   3                uart1.frame_id++;
  89   3                if(uart1.frame_id >= FRAME_QUANTITY){
  90   4                uart1.frame_id=0;
  91   4                }
  92   3              }
  93   2          }
  94   1        }
  95          
  96            
  97          // 定时器1中断interrupt 1
  98            void timer_interrupt(void)       
  99          {
 100   1         Uart_Time_Even();
 101   1         //TL0 = 0xCD;    //设置定时初值15系列有自动重装模式不用重装初值
 102   1         //TH0 = 0xD4;    //设置定时初值
 103   1      }
 104            
 105            
 106          // 串口中断处理函数 （串口接收到数据，发送数据完毕都可以引起串口中断）也叫串行中断服务程序
 107          //中断统一放interrupt.c里面interrupt 4 
 108          void uart_interrupt(void)     
 109          {
 110   1        if(RI)                                      //接收数据(1字节)完毕，RI会被硬件置1
 111   1        {
 112   2          RI = 0;                                  // 将 接收中断标志位 清零(让串口可以继续接收数据)
 113   2           if(uart1.status!=BUSY){
 114   3              uart1.status=BUSY; 
 115   3              frame[uart1.frame_id].length=0;
 116   3           }
C51 COMPILER V9.60.0.0   UART                                                              05/17/2020 19:06:56 PAGE 3   

 117   2            frame[uart1.frame_id].buffer[frame[uart1.frame_id].length]= SBUF;
 118   2            frame[uart1.frame_id].length++;
 119   2            if(frame[uart1.frame_id].length>=19){
 120   3            frame[uart1.frame_id].length=19;
 121   3            }
 122   2            uart1.time_out=0;
 123   2        }
 124   1        
 125   1        
 126   1        if(TI)// 发送数据(1字节)完毕
 127   1        {
 128   2          TI = 0;// 将 发送中断标志位 清零(让串口可以继续发送数据)
 129   2        }
 130   1      }
 131          
 132          
 133          
 134          //    uart_send_str_len(frame[0].buffer,frame[0].length);
 135          //    uart_send_str("\r\n");
 136          //    uart_send_str_len(frame[1].buffer,frame[1].length);
 137          //    uart_send_str("\r\n");
 138          //    uart_send_str_len(frame[2].buffer,frame[2].length);
 139          //    uart_send_str("\r\n");


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     70    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
